{"version":3,"sources":["components/GlobalStyle.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","ContactList","styled","ul","ContactItem","li","ContactText","p","Contacts","contacts","onDeleteContact","map","id","name","number","onClick","FormContainer","form","FormLabel","label","FormInput","input","FormButton","button","Form","state","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","FilterContainer","div","FilterLabel","FilterInput","Filter","App","filter","deleteContact","contactId","prevState","contact","addContact","foundNames","toLocaleLowerCase","lowerName","includes","alert","handleFilterReset","clearFilter","changeFilter","filteredToLocaleLowerCase","contactsFiltered","toLowerCase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5fa53b5.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    font-family: Montserrat, -apple-system, BlinkMacSystemFont, 'Segoe UI',\n      Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue',\n      sans-serif;\n    background-color: #fff;\n    color: #010101;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    text-align: center;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  /* width: 600px; */\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n  width: 450px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  font-size: 18px;\n  font-weight: 500;\n\n  :not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ContactText = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n  margin-right: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactList, ContactItem, ContactText } from './Contacts.styled';\n\nconst Contacts = ({ contacts, onDeleteContact }) => (\n  <ContactList>\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem key={id}>\n        <ContactText>\n          {name}: {number}\n        </ContactText>\n        <button onClick={() => onDeleteContact(id)}>Delete</button>\n      </ContactItem>\n    ))}\n  </ContactList>\n);\n\nexport default Contacts;\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid rgb(11, 37, 4);\n  padding: 20px;\n  width: 450px;\n  margin: 0 auto;\n`;\n\nexport const FormLabel = styled.label`\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 20px;\n`;\n\nexport const FormInput = styled.input`\n  width: 250px;\n  height: 30px;\n  margin-bottom: 15px;\n`;\n\nexport const FormButton = styled.button`\n  padding: 10px 15px;\n  width: 170px;\n  height: 50px;\n  font-size: 20px;\n  background-color: rgb(175, 177, 218);\n  color: rgb(4, 2, 10);\n  border: none;\n  border-radius: 15px;\n  text-align: center;\n`;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { FormContainer, FormLabel, FormInput, FormButton } from './Form.styled';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <FormContainer onSubmit={this.handleSubmit}>\n        <FormLabel htmlFor={this.nameInputId}>\n          Name{' '}\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </FormLabel>\n        <FormLabel htmlFor={this.numberInputId}>\n          Number{' '}\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </FormLabel>\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormContainer>\n    );\n  }\n}\n\nexport default Form;\n\nForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  /* margin-bottom: 15px; */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 20px auto;\n  width: 450px;\n`;\n\nexport const FilterLabel = styled.label`\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 10px;\n  margin-right: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 250px;\n  height: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport { FilterContainer, FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = ({ value, onChange }) => (\n  <FilterContainer>\n    <FilterLabel>Find contacts by name</FilterLabel>\n    <FilterInput type=\"text\" value={value} onChange={onChange} />\n  </FilterContainer>\n);\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { GlobalStyle } from './components/GlobalStyle';\nimport Contacts from './components/Contacts/Contacts';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  // formSubmitHandler = data => {\n  //   console.log(data);\n  // };\n\n  addContact = ({ name, number }) => {\n    const foundNames = this.state.contacts.map(contact =>\n      contact.name.toLocaleLowerCase(),\n    );\n    const lowerName = name.toLocaleLowerCase();\n    if (foundNames.includes(lowerName)) {\n      return alert(`${name} is already in contacts`);\n    }\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  handleFilterReset = () => {\n    this.clearFilter();\n  };\n\n  clearFilter = () => {\n    this.setState({\n      filter: '',\n    });\n  };\n\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const filteredToLocaleLowerCase = filter.toLocaleLowerCase();\n    const contactsFiltered = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filteredToLocaleLowerCase),\n    );\n\n    return (\n      <div>\n        <GlobalStyle />\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter\n          value={filter}\n          onChange={this.changeFilter}\n          onClick={this.handleFilterReset}\n        />\n        <Contacts\n          contacts={contactsFiltered}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}